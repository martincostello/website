name: build

on:
  push:
    branches: [ main ]
    paths-ignore:
    - '**/*.gitattributes'
    - '**/*.gitignore'
    - '**/*.md'
  pull_request:
    branches: [ main, dotnet-vnext ]
  workflow_dispatch:

env:
  APPLICATION_URL_DEV: https://dev.martincostello.com
  APPLICATION_URL_PROD: https://martincostello.com
  AZURE_WEBAPP_NAME: martincostello
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_MULTILEVEL_LOOKUP: 0
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  FORCE_COLOR: 1
  NUGET_XMLDOC_MODE: skip
  PUBLISH_RUNTIME: win10-x64
  TERM: xterm

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        include:
          - os: macos-latest
            codecov_os: macos
          - os: ubuntu-latest
            codecov_os: linux
          - os: windows-latest
            codecov_os: windows

    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: echo "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Setup npm cache
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Setup NuGet cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@v3
      with:
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}

    - name: Build, test and publish
      shell: pwsh
      run: ./build.ps1 -Runtime win10-x64

    - uses: codecov/codecov-action@v3
      name: Upload coverage to Codecov
      with:
        files: ./artifacts/coverage.cobertura.xml,./src/Website/coverage/lcov.info
        flags: ${{ matrix.codecov_os }}

    - name: Publish artifacts
      uses: actions/upload-artifact@v3
      if: ${{ runner.os == 'Windows' }}
      with:
        name: webapp
        path: ./artifacts/publish

    - name: Publish screenshots
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: screenshots
        path: ./artifacts/screenshots/*
        if-no-files-found: ignore

    - name: Publish traces
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: traces
        path: ./artifacts/traces/*
        if-no-files-found: ignore

    - name: Publish videos
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: videos
        path: ./artifacts/videos/*
        if-no-files-found: ignore

  deploy-dev:
    if: ${{ github.event.repository.fork == false && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
    name: dev
    needs: build
    runs-on: windows-latest
    concurrency: development_environment
    environment:
      name: dev
      url: ${{ env.APPLICATION_URL_DEV }}

    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: webapp

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: dev
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

  test-dev:
    name: test-dev
    needs: deploy-dev
    runs-on: ubuntu-latest
    concurrency: development_environment

    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3

    - name: Setup NuGet cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@v3
      with:
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}

    - name: Run end-to-end tests
      shell: pwsh
      run: dotnet test ./tests/Website.EndToEndTests --configuration Release --output ./artifacts --logger "GitHubActions;report-warnings=false"
      env:
        WEBSITE_URL: ${{ env.APPLICATION_URL_DEV }}

    - name: Publish screenshots
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: screenshots
        path: ./artifacts/screenshots/*
        if-no-files-found: ignore

    - name: Publish traces
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: traces
        path: ./artifacts/traces/*
        if-no-files-found: ignore

    - name: Publish videos
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: videos
        path: ./artifacts/videos/*
        if-no-files-found: ignore

  deploy-prod:
    name: production
    needs: test-dev
    runs-on: windows-latest
    concurrency: production_environment
    environment:
      name: production
      url: ${{ env.APPLICATION_URL_PROD }}

    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: webapp

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

  test-prod:
    name: test-prod
    needs: deploy-prod
    runs-on: ubuntu-latest
    concurrency: production_environment

    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3

    - name: Setup NuGet cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@v3
      with:
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}

    - name: Run end-to-end tests
      shell: pwsh
      run: dotnet test ./tests/Website.EndToEndTests --configuration Release --output ./artifacts --logger "GitHubActions;report-warnings=false"
      env:
        WEBSITE_URL: ${{ env.APPLICATION_URL_PROD }}

    - name: Publish screenshots
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: screenshots
        path: ./artifacts/screenshots/*
        if-no-files-found: ignore

    - name: Publish traces
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: traces
        path: ./artifacts/traces/*
        if-no-files-found: ignore

    - name: Publish videos
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: videos
        path: ./artifacts/videos/*
        if-no-files-found: ignore
