name: deploy-app

on:
  workflow_call:
    inputs:
      application-name:
        description: 'The name of the Azure App Service to deploy the container to.'
        required: true
        type: string
      container-registry:
        description: 'The name of the Azure Container Registry that contains the container image.'
        required: true
        type: string
      container-tag:
        description: 'The tag of the container image to deploy.'
        required: true
        type: string
      environment-name:
        description: 'The name of the GitHub environment to deploy to.'
        required: true
        type: string
      environment-url:
        description: 'The URL of the deployed application.'
        required: true
        type: string
      ref:
        description: 'The Git reference to check out when running tests.'
        required: true
        type: string
      slot-name:
        description: 'The name of the Azure App Service deployment slot to deploy the container to.'
        required: true
        type: string

env:
  FORCE_COLOR: 1
  TERM: xterm

permissions:
  contents: read

jobs:

  deploy:
    name: deploy-${{ inputs.environment-name }}
    runs-on: [ ubuntu-latest ]
    concurrency: ${{ inputs.environment-name }}_environment

    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ inputs.environment-url }}

    permissions:
      id-token: write

    steps:

    - name: Azure log in
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy container to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ inputs.application-name }}
        images: ${{ inputs.container-tag }}
        slot-name: ${{ inputs.slot-name }}

    - name: Check application health
      shell: pwsh
      env:
        APPLICATION_URL: ${{ inputs.environment-url }}
      run: |
        $delay = 10
        $limit = 15
        $success = $false
        for ($i = 0; $i -lt $limit; $i++) {
          $response = $null
          try {
            $response = Invoke-WebRequest -Uri "${env:APPLICATION_URL}/version" -Method Get -UseBasicParsing
          } catch {
            $response = $_.Exception.Response
          }
          if (($null -ne $response) -And ($response.StatusCode -eq 200)) {
            $json = $response.Content | ConvertFrom-Json
            $version = $json.applicationVersion
            if ((-Not [string]::IsNullOrWhiteSpace($version)) -And $version.Contains(${env:GITHUB_SHA})) {
              $success = $true
              break
            }
          }
          Start-Sleep -Seconds $delay
        }
        if (-Not $success) {
          throw "${env:APPLICATION_URL} did not return a successful status code and the expected version within the time limit after $limit attempts."
        }

  test:
    name: test-${{ inputs.environment-name }}
    needs: [ deploy ]
    runs-on: [ ubuntu-latest ]
    concurrency: ${{ inputs.environment-name }}_environment

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      DOTNET_NOLOGO: true
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
      NUGET_XMLDOC_MODE: skip

    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        filter: 'tree:0'
        ref: ${{ inputs.ref }}
        show-progress: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4

    - name: Setup NuGet cache
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright

    - name: Run end-to-end tests
      shell: pwsh
      run: dotnet test ./tests/Website.EndToEndTests --configuration Release --logger "GitHubActions;report-warnings=false"
      env:
        WEBSITE_URL: ${{ inputs.environment-url }}

    - name: Publish screenshots
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: screenshots-e2e-${{ inputs.environment-name }}
        path: ./artifacts/screenshots/*
        if-no-files-found: ignore

    - name: Publish traces
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: traces-e2e-${{ inputs.environment-name }}
        path: ./artifacts/traces/*
        if-no-files-found: ignore

    - name: Publish videos
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: videos-e2e-${{ inputs.environment-name }}
        path: ./artifacts/videos/*
        if-no-files-found: ignore
